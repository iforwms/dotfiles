#!/usr/bin/env bash

# Set up a new user and SSH credentials on a remote server.

# RED='\033[0;31m' # alerts
# CYAN='\033[0;36m' # notice
# NC='\033[0m' # no color
# PURPLE='\033[0;35m' # status
# WHITE='\033[1;37m'

# 1. Create local SSH keys for logging into new server
# 2. Update ~/.ssh/config with new server settings (as root)
# 3. Use new SSH config to:
#     - Create new user
#     - Set new user password
#     - Add new user to sudo group
#     - Add user to optionally supplied group
#     - Create remote ~/.ssh directory
#     - Create remote authorized_keys and add local SSH key
#     - Fix new user home directory permissions
# 4. Update ~/.ssh/config to use new user
# 5. Create remote SSH keys for new user

set -o errexit  # Exit the script if any command fails (add "|| true" to allow failing)
# set -o nounset  # Exit the script if an undeclared variable is used
set -o pipefail # Exit the script if an error occurs in a pipe
# set -o xtrace # Enable bash debug output
# set -o verbose # Enable verbose output

username=$1
server_name=$2
group=${3:-''}

ssh_config="${HOME}/.ssh/config"
usage="usage: ./create_user USERNAME SERVER_NAME [GROUP]"

# shellcheck source=/dev/null
source "${DOTFILES}/scripts/logger.sh"

if [[ "$#" -lt 2 ]]; then
    log_e "Please enter a username, server name and optional user group."
    log "${usage}"
    exit 1
fi

if [[ -z "${username}" ]]; then
    log_e "Please enter a username."
    log "${usage}"
    exit 1
fi

if [[ -z "${server_name}" ]]; then
    log_e "Please enter a name/alias for the server."
    log "${usage}"
    exit 1
fi

ssh_keyname="${username}_${server_name}"
local_ssh_private_key="${HOME}/.ssh/${ssh_keyname}"
remote_ssh_private_key="/home/${username}/.ssh/id_rsa"

if [[ -e "${local_ssh_private_key}" ]]; then
    log_w "A private key already exists at ${local_ssh_private_key}."
    read -p "Do you wish to use this file? (y/n) " -n 1 -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        local_ssh_private_key="${local_ssh_private_key}_new"
    fi
else
    log "Creating new SSH key pair for ${server_name}"
    ssh-keygen -t rsa -N '' -b 4096 -f "${local_ssh_private_key}" -C "${server_name}" <<<y >/dev/null 2>&1
fi

cat "${local_ssh_private_key}.pub" | pbcopy
echo
log_n "SSH key copied to clipboard. Use this when creating the server."

echo -n "Enter sudo password for ${username}@${server_name}: "
read -rs pass
echo
read -rs -p "Confirm password: " PASS_CONFIRM
if [ "${pass}" != "${PASS_CONFIRM}" ]; then
    log_e "Passwords do not match."
    exit 1
fi

echo
read -p "Enter 'y' once the new server is live, or any other key to abort. " -n 1 -r
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log_e "Aborting early..."
    exit 1
fi

echo
read -r -p "Enter the new server IP address: " server_ip
if [[ ! "${server_ip}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    log_e "Invalid IP address, aborting."
    exit 1
fi

log "Updating ${ssh_config} with server info."
cp "${ssh_config}" "${ssh_config}.bak"
cat << EOF > "${ssh_config}"
Host ${server_name}
    User root
    HostName ${server_ip}
    IdentityFile ~/.ssh/${ssh_keyname}

$(cat "${ssh_config}")
EOF

log "Creating account for ${username} on ${server_name} and setting password and adding user to sudo group."
ssh "${server_name}" "adduser --disabled-password --gecos '' ${username}; usermod -p '$(echo ${pass}|openssl passwd -6 -stdin)' ${username}; usermod -a -G sudo ${username}; umask 077; test -d /home/${username}/.ssh || mkdir /home/${username}/.ssh"

if [[ -n "${group}" && "${group}" != "${username}" ]]; then
    log "Found a group, adding ${username} to ${group} group."
    ssh "${server_name}" "usermod -a -G ${group} ${username}"
fi

log "Adding SSH key to authorized_keys and fixing permissions."
cat "${HOME}/.ssh/${ssh_keyname}.pub" | ssh "${server_name}" "cat >> /home/${username}/.ssh/authorized_keys; chmod 600 /home/${username}/.ssh/authorized_keys; chown -R ${username}:${username} /home/${username}/"

log "Updating local SSH config to use ${username} instead of root."
sed -i "/Host ${server_name}/{n;s/User root/User ${username}/}" "${ssh_config}"

read -p "Do you wish to set up SSH keys for the new user? (y/n) " -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo
    log "Creating SSH key for ${username} on remote machine."
    ssh "${server_name}" "ssh-keygen -t rsa -b 4096 -f ${remote_ssh_private_key} -C ${server_name}"

    ssh "${server_name}" "cat ${remote_ssh_private_key}.pub" | pbcopy
    log_n "New public key copied to clipboard."
    log_n "To add to GitHub go here: https://github.com/settings/ssh/new"

    read -p "Enter 'y' once the keys have been added to Github. " -n 1 -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo
        log_e "Aborting early..."
        exit 1
    fi

    echo
    # ssh "${server_name}" "ssh-add -l; git clone git@github.com:iforwms/dotfiles ~/.dotfiles"
    echo "git clone git@github.com:iforwms/dotfiles ~/.dotfiles" | pbcopy
    log "Dotfiles git clone command copied to clipboard."
fi

log "All done!"

exit 0
