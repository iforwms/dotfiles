#!/usr/bin/env bash

blue='\033[0;34m'
green='\033[0;32m'
red='\033[0;31m'
nc='\033[0m'

name=OPTIMISE_NGINX_DOMAIN_CONFIG
usage="usage: ./optimise_nginx_domain_config CONFIG_FILE [FORCE_WWW_REDIRECT:0 - Do nothing; 1 - Force non-www; 2 - Force www]"

config_file=$1
config_name=${config_file##*/}
force_www=${2:-0}
script_path=$(dirname "$(realpath -s "$0")")

if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo -e "${red}[${name}] This script must be run as root (or sudo). Exiting.${nc}"
    exit 1
fi

if [[ "$#" -lt 1 ]]; then
    echo -e "${red}[${name}] Please enter the path to the nginx domain config file you wish to optimise.${nc}"
    echo -e "${red}[${name}] ${usage}${nc}"
    exit 1
fi

if [[ -d "$config_file" ]]; then
    echo -e "${red}[${name}] [${config_name}] Specified path is a directory, aborting.${nc}"
    exit 1
fi

if [[ ! -e "${config_file}" ]]; then
    echo -e "${red}[${name}] [${config_name}] Config file does not exist, aborting.${nc}"
    exit 1
fi

echo -e "${blue}[${name}] [${config_name}] Creating backup file for ${config_file}.${nc}"
base_filepath=${config_file##*/}
output_filepath="${config_file%$base_filepath}.${config_file##*/}.bak"
output_filepath=${output_filepath/../.}
cp -v "$config_file" "${output_filepath}"

domain_name=$(sed -rn '/server_name/ s/server_name ([ a-z].*);/\1/p' "$config_file" | head -1 | xargs)
web_root=$(sed -rn '/^\s+root /p' "$config_file" | awk '{print $2}')
web_root=${web_root/;/}

server_block_count=$(grep -c 'server ' "$config_file")
if [[ "$server_block_count" -gt 1 ]]; then
    echo -e "${blue}[${name}] [${config_name}] Removing unused server block.${nc}"
    tac "$config_file" | sed '0,/server {/d' | tac | sed '/^$/N;/^\n$/D' > "$config_file".tmp
    mv -v "${config_file}.tmp" "$config_file"
fi

echo -e "${blue}[${name}] [${config_name}] Removing managed by Certbot lines.${nc}"
sed -i '/# managed by Certbot/d;' "$config_file"

echo -e "${blue}[${name}] [${config_name}] Removing listen directive.${nc}"
sed -i '/listen/d' "$config_file"

echo -e "${blue}[${name}] [${config_name}] Adding h5bp basic configuration include to existing site configs.${nc}"
sed -i '/fastcgi_pass/,/}/ s/}/} \n\n    include h5bp\/basic.conf;\n\n/' "$config_file"

sed -i "
/server /a\ \ \ \ listen 443 ssl http2;\n\
\n\
    include h5bp\/tls\/ssl_engine.conf;\n\
    ssl_certificate \/etc\/letsencrypt\/live/${domain_name}\/fullchain.pem;\n\
    ssl_certificate_key \/etc\/letsencrypt\/live/${domain_name}\/privkey.pem;\n\
    include h5bp\/tls\/policy_strict.conf;\n\
\n\
" "$config_file"

www_domain=""
if [[ $force_www == 1 ]]; then
   echo
   echo -e "${blue}[${name}] [${config_name}] Updating config to force non-www URL.${nc}"

sed -i "
1 i\
server {\n\
    listen 443 ssl http2;\n\
\n\
    server_name www.${domain_name};\n\
\n\
    include h5bp/tls/ssl_engine.conf;\n\
    ssl_certificate \/etc\/letsencrypt\/live/${domain_name}\/fullchain.pem;\n\
    ssl_certificate_key \/etc\/letsencrypt\/live/${domain_name}\/privkey.pem;\n\
    include h5bp/tls/policy_balanced.conf;\n\
\n\
    return 301 \$scheme://${domain_name}\$request_uri;\n\
}\n\n\
" "$config_file"

    www_domain="www.${domain_name}"
elif [[ $force_www == 2 ]]; then
   echo
   echo -e "${blue}[${name}] [${config_name}] Updating config to force www URL.${nc}"

sed -i "
1 i\
server {\n\
    listen 443 ssl http2;\n\
\n\
    server_name ${domain_name};\n\
\n\
    include h5bp/tls/ssl_engine.conf;\n\
    ssl_certificate \/etc\/letsencrypt\/live/${domain_name}\/fullchain.pem;\n\
    ssl_certificate_key \/etc\/letsencrypt\/live/${domain_name}\/privkey.pem;\n\
    include h5bp/tls/policy_balanced.conf;\n\
\n\
    return 301 \$scheme://www.${domain_name}\$request_uri;\n\
}\n\n\
" "$config_file"

    www_domain="${domain_name}"
fi

echo -e "${blue}[${name}] [${config_name}] Creating SSL certificate.${nc}"
"${script_path}/create_ssl_certificate" ifor@cors.tech "$web_root" "$domain_name" "$www_domain"

echo -e "${green}[${name}] [${config_name}] All done!${nc}"
exit 0
