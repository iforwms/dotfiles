#!/usr/bin/env bash

blue='\033[0;34m'
green='\033[0;32m'
red='\033[0;31m'
nc='\033[0m'

name="MuseScore"
base_dir="/Users/ifor/Documents/MuseScore4"
style_file_path="${base_dir}/Styles/my_style.mss"
output_dir="${base_dir}/Scores"
date_now=$(date "+%Y-%m-%d")
time_signature_subtype=0

script_path=$(dirname "$(realpath -s "$0")")
audio_file_path="${script_path}/musescore_audio.json"

declare -rA key_signatures=(
  ["Gb"]=-6 ["Db"]=-5 ["Ab"]=-4 ["Eb"]=-3 ["Bb"]=-2 ["F"]=-1
  ["C"]=0 ["G"]=1 ["D"]=2 ["A"]=3 ["E"]=4 ["B"]=5 ["F#"]=6
)

song_title="$1"
if [[ $# -gt 1 ]]; then
  composer="$2"
  artist_name="$3"
  album_name="$4"
  tempo="$5"
  key_signature="$6"
  time_signature_raw="$7"
  part_musician="$8"
  no_of_bars="$9"
else
  if [[ -z "$song_title" ]]; then
    read -p "[${name}] Enter the song title: " -r song_title
    if [[ -z "$song_title" ]]; then
       echo
       echo -e "${red}[${name}] Song title required, aborting.${nc}"
       exit 1
    fi
  fi

  read -p "[${name}] Enter the composer (optional): " -r composer
  read -p "[${name}] Enter the artist name (optional): " -r artist_name
  read -p "[${name}] Enter the album name and year (optional): " -r album_name
  read -p "[${name}] Enter song tempo (optional): " -r tempo
  read -p "[${name}] Enter the major key signature (optional): " -r key_signature
  read -p "[${name}] Enter the time signature (X/Y, c: common, c-: cut) (optional): " -r time_signature_raw
  read -p "[${name}] For a solo piece, enter the musician playing this part (Instrument: Musician - optional): " -r part_musician
  read -p "[${name}] Enter number of bars (optional): " -r no_of_bars
fi

filename=$(echo "${artist_name}-${song_title}" | sed "
  s/[^[:alnum:]_\/\ \.-]//g;
  s/ /./g;
  s/\.\././g;
")
filename="${filename,,}"
if [[ -e "${output_dir}/${filename}.mscz" ]]; then
   echo -e "${red}[${name}] A file with that name already exists, aborting.${nc}"
   exit 1
fi
# echo $filename
# exit

tempo="${tempo:-120}"
tempo_decimal=$(echo "${tempo}/60" | bc -l | cut -c -10)

no_of_bars="${no_of_bars:-32}"

time_signature_raw="${time_signature_raw:-4/4}"
time_signature="$time_signature_raw"
if [[ $time_signature_raw == 'c' ]]; then
  time_signature="4/4"
  time_signature_subtype=1
fi
if [[ $time_signature_raw == 'c-' ]]; then
  time_signature="2/2"
  time_signature_subtype=2
fi
time_signature_top=$(echo $time_signature | awk -F'/' '{print $1}')
time_signature_btm=$(echo $time_signature | awk -F'/' '{print $2}')

key_signature="${key_signature:-C}"
if [[ -v "key_signatures[${key_signature}]" ]] ; then
  key_signature_int="${key_signatures[$key_signature]}"
else
  echo -e "${blue}[${name}] Unknown key signature, defaulting to C major.${nc}"
  key_signature_int=0
fi

# echo -e "${green}Song Details:
# Composer: ${composer}
# Title: ${song_title}
# Artist: ${artist_name}
# Album: ${album_name}
# Tempo: ${tempo}
# Key Sig: ${key_signature}
# Time Sig: ${time_signature} (${time_signature_raw})
# Musician: ${part_musician}
# No of Bars: ${no_of_bars}
# ${nc}"
# exit

view_settings='{"notation":{"viewMode":"continuous_h"}}'
meta_inf="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<container>
  <rootfiles>
    <rootfile full-path=\"score_style.mss\"/>
    <rootfile full-path=\"${filename}.mscx\"/>
    <rootfile full-path=\"Thumbnails/thumbnail.png\"/>
    <rootfile full-path=\"audiosettings.json\"/>
    <rootfile full-path=\"viewsettings.json\"/>
  </rootfiles>
</container>"

echo "Creating temp directory structure."
mkdir -p $output_dir/$filename/{META-INF,Thumbnails}

echo "Copying audio file."
cp -v "$audio_file_path" "${output_dir}/${filename}/audiosettings.json"

echo "Creating container file."
echo $meta_inf > "${output_dir}/${filename}/META-INF/container.xml"

echo "Creating view settings file."
echo $view_settings > "${output_dir}/${filename}/viewsettings.json"

echo "Copying style file."
cp -v "$style_file_path" "${output_dir}/${filename}/score_style.mss"

echo "Generating faux thumbnail."
convert -size "181x256" canvas:white "${output_dir}/${filename}/Thumbnails/thumbnail.png"

time_signature_subtype_replacement=""
if [[ $time_signature_subtype -ne 0 ]]; then
  time_signature_subtype_replacement="<subtype>${time_signature_subtype}</subtype>"
fi

echo "Generating mscx file."
sed "
s|XXTITLEXX|${song_title}|g;
s|XXSUBTITLEXX|${artist_name}|g;
s|XXALBUM_NAMEXX|${album_name}|g;
s|XXCOMPOSERXX|${composer}|g;
s|XXTEMPOXX|${tempo}|g;
s|XXTEMPO_DECIMALXX|${tempo_decimal}|g;
s|XXCREATIONXX|${date_now}|g;
s|XXEXTRAXX|${part_musician}|g;
s|XXTIME_SIGNATUREXX|${time_signature}|g;
s|XXTIME_SIG_SUBTYPEXX|${time_signature_subtype_replacement}|g;
s|XXKEY_SIGNATUREXX|${key_signature_int}|g;
s|XXTIME_SIG_TOPXX|${time_signature_top}|g;
s|XXTIME_SIG_BTMXX|${time_signature_btm}|g;
" "${script_path}/musescore_template.xml" > "${output_dir}/${filename}/${filename}.mscx"

id=38654705689
for m in $(seq 2 $no_of_bars); do
  id=$(($id + $m))
  echo "      <Measure>
        <voice>
          <Rest>
            <eid>${id}</eid>
            <durationType>measure</durationType>
            <duration>${time_signature}</duration>
          </Rest>
        </voice>
      </Measure>" >> "${output_dir}/${filename}/${filename}.mscx"
done
echo "    </Staff>" >> "${output_dir}/${filename}/${filename}.mscx"

echo "    <Staff id=\"2\">
      <Measure>
        <voice>
          <KeySig>
            <eid>171798691862</eid>
            <linked></linked>
            <concertKey>${key_signature_int}</concertKey>
          </KeySig>
          <TimeSig>" >> "${output_dir}/${filename}/${filename}.mscx"

if [[ $time_signature_subtype -ne 0 ]]; then
  echo "            <subtype>${time_signature_subtype}</subtype>" >> "${output_dir}/${filename}/${filename}.mscx"
fi

echo "            <eid>171798691864</eid>
            <sigN>${time_signature_top}</sigN>
            <sigD>${time_signature_btm}</sigD>
          </TimeSig>
          <Rest>
            <eid>176093659161</eid>
            <linked></linked>
            <durationType>measure</durationType>
            <duration>${time_signature}</duration>
          </Rest>
        </voice>
      </Measure>" >> "${output_dir}/${filename}/${filename}.mscx"

for m in $(seq 2 $no_of_bars); do
  id=$(($id + $m))
  echo "      <Measure>
        <voice>
          <Rest>
            <eid>${id}</eid>
            <linked></linked>
            <durationType>measure</durationType>
            <duration>${time_signature}</duration>
          </Rest>
        </voice>
      </Measure>" >> "${output_dir}/${filename}/${filename}.mscx"
done
echo "    </Staff>" >> "${output_dir}/${filename}/${filename}.mscx"

echo "  </Score>
</museScore>" >> "${output_dir}/${filename}/${filename}.mscx"

echo "Generating compressed mscz file."
(cd ${output_dir}/${filename} && zip -r - .) > "${output_dir}/${filename}.mscz"

echo "Removing temp directory."
rm -vrf "${output_dir}/${filename}"

echo -e "${green}[${name}] All done!${nc}"

echo "Opening new file..."
open "${output_dir}/${filename}.mscz"

exit 0

