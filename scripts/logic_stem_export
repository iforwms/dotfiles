#!/bin/bash

set -o errexit    # Used to exit upon error, avoiding cascading errors
set -o pipefail   # Unveils hidden failures
set -o nounset    # Exposes unset variables

shopt -s nocaseglob # Make globbing case-insensitive

# Helper functions
function count_unique() {
    local LC_ALL=C

    if [ "$#" -eq 0 ]; then
        echo 0
    else
        printf "%s\000" "$@" | \
            sort --zero-terminated --unique | \
            /usr/local/bin/ggrep --null-data --count .
    fi
}
# End helper functions

# In Logic Pro
# 1. Split all tracks into individual regions
# 2. Create markers for each song
# 3. Set all stem outputs to a common bus
# 4. Add the common bus to the track list (Ctrl + T)
# 5. File > Export > All Tracks as Audio Files... (Shift + Cmd + E)
# 6. Set the "Range" to Extend File Length to Project Length
# 7. Rename common bus to mix.wav
# 8. List Editors (D) > Markers
# 9. View > Check both "Show Event Time Position and
#    Length as Time" and "Length as Absolute Position"
# 10. Copy all marker info and paste into a file called markers

# Marker file example:
# 00:00:00:00.00  chill    00:02:31:19.57
# 00:02:38:06.42  drum_groove  00:00:16:17.33

directory_path="${1-}"

if [[ -z "$directory_path" ]]; then
    echo "[ERROR] A path to the WAV files is required, exiting..."
    exit 1
fi

if [[ ! -d "$directory_path" ]]; then
    echo "[ERROR] Path provided is not a directory, exiting..."
    exit 1
fi

# TODO: Fail if directory is not writable
mkdir -p "${directory_path}/output"

if [[ ! -e "${directory_path}/markers" ]]; then
    echo "[ERROR] Missing 'markers' file, exiting..."
    exit 1
fi

if [[ ! -e "${directory_path}/mix.wav" ]]; then
    echo "[ERROR] Missing 'mix.wav' file, exiting..."
    exit 1
fi

echo "[INFO] Validating WAV files..."
file_durations=()
for f in "${directory_path}"/*.wav; do
    file_duration=$(ffprobe -i "$f" -show_entries format=duration -v quiet -of csv='p=0')
    file_durations+=("$file_duration")

    # TODO: Print with durations aligned
    # echo "${f##*/} - ${file_duration}"
done

if [[ "$(count_unique "${file_durations[@]}")" -ne 1 ]]; then
    echo "[ERROR] WAV file durations not equal, exiting..."
    exit 1
fi

# for f in "${directory_path}"/*.wav; do
#     echo; echo "$f"
#     while read -r line; do
#         marker_name=$(echo "$line" | awk '{print $2}')
#         start_time=$(echo "$line" | awk '{print $1}' | rev | sed 's/\.//;s/:/\./' | rev)
#         duration=$(echo "$line" |  awk '{print $3}' | rev | sed 's/\.//;s/:/\./' | rev)
#         new_filename="${f%.wav}_${marker_name}.wav"
#         echo "${marker_name} - ${start_time} - ${duration}"
#     done < "${directory_path}/markers"
# done

# TODO: Show confirmation dialog for markers before continuing.

echo "[INFO] Splitting WAV files..."
for f in "${directory_path}"/*.wav; do
    while read -r line; do
        marker_name=$(echo "$line" | awk '{print $2}')
        start_time=$(echo "$line" | awk '{print $1}' | sed 's/\([0-9]\{1,2\}:[0-9]\{2\}:[0-9]\{2\}\):\([0-9]\{2\}\).\([0-9]\{2\}\)/\1.\2\3/')
        duration=$(echo "$line" | awk '{print $3}' | sed 's/\([0-9]\{1,2\}:[0-9]\{2\}:[0-9]\{2\}\):\([0-9]\{2\}\).\([0-9]\{2\}\)/\1.\2\3/')
        new_filename="${f%/*}/output/${f##*/}"
        new_filename="${new_filename%.wav}_${marker_name}.wav"

        echo
        echo "[DEBUG] ffmpeg -i $f -ss $start_time -t $duration -c copy $new_filename"
        echo
        echo "Generating file for ${f##*/} on ${marker_name}..."
        ffmpeg -y \
            -nostdin \
            -i "${f}" \
            -ss "${start_time}" \
            -t "${duration}" \
            -c copy "${new_filename}" # 2>./error.log #-loglevel quiet
    done < "${directory_path}/markers"
done

# TODO: Make MP3 conversion optional?

echo "[INFO] Converting WAV files to MP3..."
for f in "${directory_path}/output"/*.wav; do
    ffmpeg \
        -y \
        -i "$f" \
        -write_id3v1 1 \
        -id3v2_version 3 \
        -dither_method triangular \
        -qscale:a 1 \
        "${f%.wav}.mp3"
done

echo "[SUCCESS] All done!"
