#!/usr/bin/env bash

AUTHOR="Ifor Waldo Williams <ifor@cors.tech>"
NAME=mp3ToFolder
VERSION=0.0.1
RELEASE=20210907
VERBOSE=false
FORCE_MOVE=false
CLEAN=false

ONLY_CONSOLE=false
ONLY_LOG=false
INSTALL_LOG=/tmp/mp3ToFolder.log
TEMP_FILELIST=/tmp/mp3ToFolder_folders-to-process
TEMP_CLEAN_LIST=/tmp/mp3ToFolder_folders-to-delete
INPUT_DIR=""
OUTPUT_DIR=""

function showHelp()
{
    echo
    echo "  ${NAME}"
    echo
    echo "  Read audio file metadata them move the files to a new directory structure."
    echo "  NOTE: This software requires the ffprobe package from ffmpeg to work."
    echo
    echo "  Syntax: ${NAME} -i <input directory> -o <output directory> [-vmc|h|V]"
    echo
    echo "  Options:"
    echo "    i     Full path to input directory."
    echo "    o     Full path to output directory."
    echo "    c     Attempt to clean empty directories if moving files."
    echo "    v     Turn on verbose mode."
    echo "    m     Force moving files instead of copying."
    echo "    h     Print this Help."
    echo "    V     Print software version and exit."
    echo
    exit 1
}

function showVersion()
{
    echo "${NAME} ${VERSION} (release: ${RELEASE})"
    echo "Built by ${AUTHOR}"
    exit 0
}

function checkForFfmpeg()
{
    log "Checking if ffprobe exists."
    if ! command -v ffprobe &> /dev/null
    then
        showError "ffprobe is required and could not be found, please install the ffmpeg package."
        exit
    fi
    log "ffprobe exists, OK."
}

function log()
{
    local TIMESTAMP=$(date '+[%Y-%m-%d %H:%M:%S]')
   local MESSAGE="${@}"
   if [[ "${VERBOSE}" == true ]]; then
      echo "${TIMESTAMP} [DEBUG] ${MESSAGE}"
   fi
}

function showError()
{
    local TIMESTAMP=$(date '+[%Y-%m-%d %H:%M:%S]')
    local MESSAGE="${@}"
    COLOR=31 #red
    FG="\033[${COLOR}m"
    RESET="\033[0m"

    echo -e "${FG}${TIMESTAMP} [ERROR] ${MESSAGE}${RESET}"
}

function checkDirExists()
{
    log "Checking if ${1} exists."
    if [ ! -d "$1" ]; then
        showError "Directory ${1} does not exist."
        exit 1
    fi
    log "${1} exists, OK."
}

function generateAudioFileList()
{
    log "Generating audio list for ${1}"
    find ${1} -type f -name '*.mp3' -o -name '*.flac' -o -name '*.m4a' > $TEMP_FILELIST
    log "Audio list generated, found $(wc -l < $TEMP_FILELIST) files."
}

function getAudioMeta()
{
    PROPERTIES="YEAR DISC DATE ALBUM TRACK ARTIST TITLE DISCTOTAL TRACKTOTAL"
    for PROPERTY in $PROPERTIES; do
        local TEMP=$(ffprobe -loglevel quiet -show_entries format_tags="$PROPERTY" "$1" | sed "1d;\$d;s/tag:${PROPERTY}=//i")
        export ${PROPERTY}="$TEMP"
    done

    for PROPERTY in $PROPERTIES; do
        log "${PROPERTY} - ${!PROPERTY}"
    done
}

function processAudioFiles()
{
    log "Beginning to process audio files."

    COUNT=$(wc -l < $TEMP_FILELIST)
    INC=0

    while read LINE; do
        getAudioMeta "$LINE"
        # TODO: Trim output_dir ending slash?

        TITLE="${TITLE//\//_}"
        ARTIST="${ARTIST//\//_}"
        ALBUM="${ALBUM//\//_}"

        if [ -z "$ALBUM" -a "$ALBUM" == "" ]; then
            ALBUM="Unknown - ${ARTIST}"
        fi

        if [ -z "$TITLE" -a "$TITLE" == "" ]; then
            showError "${LINE} has no meta data, skipping..."
            ((INC++))
            continue
        fi

        TRACK=$(echo $TRACK|cut -d'/' -f1)
        TRACK="${TRACK//\//_}"
        TRACK=$(printf %02d $TRACK)

        FILENAME="${TRACK} ${ARTIST} - ${TITLE}"
        EXT="${LINE##*.}"

        NEW_PATH="${OUTPUT_DIR}/${ALBUM}"

        mkdir -p "${NEW_PATH}" 2>/dev/null

        DESTINATION="${NEW_PATH}/${FILENAME}.${EXT}"

        local TIMESTAMP=$(date '+[%Y-%m-%d %H:%M:%S]')
        PERCENT=$(printf '%.2f\n' $(echo "${INC}/${COUNT}*100" | bc -l))
        echo "${TIMESTAMP} [INFO] [${INC}/${COUNT} (${PERCENT}%)] Processing ${ARTIST}-${ALBUM}-${TRACK}"

        if [[ $FORCE_MOVE == true ]]; then
            log "Attempting to move ${LINE} to ${DESTINATION}"
            mv "${LINE}" "${DESTINATION}"
        else
            log "Attempting to copy ${LINE} to ${DESTINATION}"
            cp "${LINE}" "${DESTINATION}"
        fi

        ((INC++))
    done < $TEMP_FILELIST
}

function cleanDirs()
{
    log "Checking for empty directories in ${1}"

    find $1 -maxdepth 1 -type d -exec du -s {} \; | sort -rn | awk '$1 == 0 {print $0}' | cut -d/ -f2- > $TEMP_CLEAN_LIST

    log "Found $(wc -l < $TEMP_CLEAN_LIST) empty directories."

    # due to the 'cut' above we lose the leading slash
    while read LINE; do
        log "Removing /${LINE}"
        rm -rf "/$LINE"
    done < $TEMP_CLEAN_LIST

    # Purge ALBUM covers
    # find . -type f -name 'cover*.jp*g' -o -name 'cover*.png' -delete
}

function main()
{
    # If no input argument found, exit the script with help
    if [[ ${#} -eq 0 ]]; then
        log "No arguments supplied."
        showHelp
    fi

    # Get the options, leading : silences errors
    while getopts ":hmvcVi:o:" option; do
        case $option in
            i)
                INPUT_DIR=${OPTARG}
                ;;
            o)
                OUTPUT_DIR=${OPTARG}
                ;;
            c)
                CLEAN=true
                echo "Clean directories is ON"
                ;;
            v)
                VERBOSE=true
                log "Verbose mode is ON"
                ;;
            m)
                FORCE_MOVE=true
                echo "Force move is ON"
                ;;
            V)
                showVersion
                ;;
            h)
                showHelp
                ;;
            :)
                showError "-${OPTARG} requires an argument."
                showHelp
                ;;
            \?)
                showError "Invalid option."
                showHelp
                ;;
        esac
    done

    if [ ! -n "$INPUT_DIR" ]; then
        showError "Input directory cannot be empty."
        showHelp
    fi

    if [ ! -n "$OUTPUT_DIR" ]; then
        showError "Output directory cannot be empty."
        showHelp
    fi

    checkDirExists "$INPUT_DIR"
    checkDirExists "$OUTPUT_DIR"
    checkForFfmpeg
    generateAudioFileList "$INPUT_DIR"
    processAudioFiles

    if [[ $CLEAN == true && $FORCE_MOVE == true ]]; then
        cleanDirs "$INPUT_DIR"
    fi
}

# If/else block to allow logging to various places
if [[ "${ONLY_CONSOLE}" == true ]]; then
    main $@
elif [[ "${ONLY_LOG}" == true ]]; then
    main $@ >> $INSTALL_LOG 2>&1
else
    main $@ 2>&1 | tee -a $INSTALL_LOG
fi

exit 0
